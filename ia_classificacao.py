# -*- coding: utf-8 -*-
"""IA_classificacao

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12K1Xz5G1YEegHSfvOtvYnstfYziMz4je
"""

!pip install scikit-learn

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Importar base de dados

tabela = pd.read_csv("/content/clientes.csv")
print (tabela)

# Verificar se há necessidade de realizar a limpeza dos dados
print(tabela.info())
print(tabela.columns)

# Transformar colunas de texto em números
codificador = LabelEncoder()

# A coluna score_credito não será alterada porque é o nosso objetivo
for coluna in tabela.columns:
  if tabela[coluna].dtype == "object" and coluna != "score_credito":
    tabela[coluna] = codificador.fit_transform(tabela[coluna])

# Verificar se as colunas foram modificadas
print (tabela.info())

# x - Escolher quais colunas serão usadas para treinar o modelo
     #(excluir "id_cliente", por não ter correlação, e o objetivo "score_credito")
# y - A coluna que o algoritmo deve calcular

x = tabela.drop(["score_credito", "id_cliente"], axis=1)
y = tabela["score_credito"]

# Separar dados para treino e teste
x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=0.3, random_state=1)

# Modelo árvore de decisão
modelo_arvore = RandomForestClassifier()

# Treinar o modelo árvore de decisão
modelo_arvore.fit(x_treino, y_treino)

# Modelo do KNN
modelo_knn = KNeighborsClassifier()

# Treinar o modelo KNN
modelo_knn.fit(x_treino, y_treino)



# Valor da acurácia caso todos os modelos fossem "stardart"

contagem_scores = tabela["score_credito"].value_counts()
print(contagem_scores['Standard'] / sum(contagem_scores))

# Calcular as previsoes
previsao_arvore = modelo_arvore.predict(x_teste)
previsao_knn = modelo_knn.predict(x_teste.to_numpy())

# Comparar as previsoes com o y_teste
# Identificar o algoritmo com a maior eficácia
print(accuracy_score(y_teste, previsao_arvore))
print(accuracy_score(y_teste, previsao_knn))

# Aplicar o algoritmo a novos clientes
novos_clientes = pd.read_csv("/content/novos_clientes.csv")
display(novos_clientes)

for coluna in novos_clientes.columns:
  if novos_clientes[coluna].dtype == "object" and coluna != "score_credito":
    novos_clientes[coluna] = codificador.fit_transform(novos_clientes[coluna])

previsoes = modelo_arvore.predict(novos_clientes)
print(previsoes)

# Identificar a importância de cada coluna na classificação
colunas = list(x_teste.columns)
importancia = pd.DataFrame(index=colunas, data=modelo_arvore.feature_importances_)
importancia = importancia * 100
print(importancia)